plugins {
    id "maven-publish"
    id "fabric-loom" version "1.10.1"
    id "babric-loom-extension" version "1.10.1"
    id 'com.palantir.git-version' version "4.0.0"
}

version = project.mod_version
group = project.maven_group

project.ext.gitDetails = versionDetails()

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")

    // Our custom manifest replaces LWJGL2 with our LWJGL3 injector.
    // customMinecraftMetadata = ""
}

babric {
    // Disable gambac library (M1 colours fix.)
    // Our LWJGL3 injector already deals with it.
    disableM1Fixes.set(true)
}

repositories {
    // Used for Nostalgia mappings.
    maven {
        name = "Wisp Forest"
        url = "https://maven.wispforest.io"
    }

    // Used for Brigadier.
    maven {
        name = "Mojang"
        url = "https://libraries.minecraft.net"
    }

    // Used for projects without a maven, but on GitHub repos with working build scripts.
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        def winArm64 = "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
        project.ext.lwjglNatives = osArch.contains("64") ? winArm64 : "natives-windows-x86"
        break
}

dependencies {
    // Adds LWJGL3 wrapper
    implementation "com.github.Adventurecraft-Awakening:AC-LWJGL3-Injector:${project.lwjgl_injector_version}"

    implementation platform("org.lwjgl:lwjgl-bom:${project.lwjgl_version}")

    implementation "org.lwjgl:lwjgl-glfw:${project.lwjgl_version}"
    implementation "org.lwjgl:lwjgl-stb:${project.lwjgl_version}"
    implementation "org.lwjgl:lwjgl-opengl:${project.lwjgl_version}"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    // Rhino is the JS engine: https://github.com/mozilla/rhino/releases
    // Archived versions: https://www-archive.mozilla.org/rhino/rhino16r2
    implementation "org.mozilla:rhino:${project.rhino_version}"

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "me.alphamode:nostalgia:${project.nostalgia_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Override ASM to support Java 23
    implementation "org.ow2.asm:asm:${project.asm_version}"
    implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
    implementation "org.ow2.asm:asm-commons:${project.asm_version}"
    implementation "org.ow2.asm:asm-tree:${project.asm_version}"
    implementation "org.ow2.asm:asm-util:${project.asm_version}"

    // Fabric-ASM allows us to extend enums.
    modImplementation "com.github.Chocohead:Fabric-ASM:v2.3"
    include "com.github.Chocohead:Fabric-ASM:v2.3"

    // FastUtil provides specialized collection types.
    implementation "it.unimi.dsi:fastutil-core:8.5.15"

    // Brigadier provides modern command parsing.
    modImplementation "com.mojang:brigadier:1.3.10"

    implementation "org.slf4j:slf4j-api:1.8.0-beta4"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.18.0"

    implementation "com.google.guava:guava:33.4.0-jre"
    implementation "org.apache.commons:commons-lang3:3.17.0"

    // Optional dependencies for filesystem icon rendering.
    implementation "net.java.dev.jna:jna:5.17.0"
    implementation "net.java.dev.jna:jna-platform:5.17.0"

    implementation "com.github.bailuk:java-gtk:0.6.0"
}

configurations.configureEach {
    // Removes LWJGL2 dependencies
    exclude group: "org.lwjgl.lwjgl"
}

processResources {
    filesMatching("fabric.mod.json") {
        expand project.properties
    }
}

tasks.register("fixRunResources") {
    dependsOn("processResources")
    doLast {
        copy {
            from("build/resources/main")
            into("out/production/resources")
        }
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and
    // to the "build" task if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// For information on how to set up publishing,
// see https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact,
        // not for retrieving dependencies.
    }
}
